#!/usr/bin/env python3
import os
import sys

from termcolor import colored
from analyzer import Analyzer
from twython import Twython
from twython import TwythonAuthError, TwythonError, TwythonRateLimitError

def main():
    # ensure proper usage
    if len(sys.argv) != 2:
        sys.exit('Usage: ./tweets @username')

    screen_name = sys.argv[1]
    count = 50

    # ensure environment variables are set
    if not os.environ.get("API_KEY"):
        raise RuntimeError("API_KEY not set")
    if not os.environ.get("API_SECRET"):
        raise RuntimeError("API_SECRET not set")

    # get screen_name's (or @screen_name's) most recent tweets
    # https://dev.twitter.com/rest/reference/get/users/lookup
    # https://dev.twitter.com/rest/reference/get/statuses/user_timeline
    # https://github.com/ryanmcgrath/twython/blob/master/twython/endpoints.py
    try:
        twitter = Twython(os.environ.get("API_KEY"), os.environ.get("API_SECRET"))
        user = twitter.lookup_user(screen_name=screen_name.lstrip("@"))
        if user[0]["protected"]:
            return None
        tweets = twitter.get_user_timeline(screen_name=screen_name, count=count)
        # return [html.unescape(tweet["text"].replace("\n", " ")) for tweet in tweets]
    except TwythonAuthError:
        raise RuntimeError("invalid API_KEY and/or API_SECRET") from None
    except TwythonRateLimitError:
        raise RuntimeError("you've hit a rate limit") from None
    except TwythonError:
        return None

    analyzer = Analyzer('positive-words.txt', 'negative-words.txt')

    # print(tweets)
    for tweet in tweets:
        text = tweet['text'].replace('\n', ' ')
        score = analyzer.analyze(text)

        if score > 0.0:
            print(colored(":)", "green"), colored(text, 'green'))
        elif score < 0.0:
            print(colored(":(", "red"), colored(text, 'red'))
        else:
            print(colored(":|", "yellow"), colored(text, 'yellow'))

if __name__ == '__main__':
    main()
